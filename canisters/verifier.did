type GetUserAgeResult = variant { Ok : int8; Err : GetUserErr };
type GetUserErr = variant { UserDoesNotExist : principal };
type GetVerifierErr = variant { VerifierDoesNotExist : principal };
type GetVerifierResult = variant { Ok : Verifier; Err : GetVerifierErr };
type User = record {
  id : principal;
  updated_at : opt nat64;
  birthdate : nat64;
  created_at : nat64;
};
type Verifier = record { id : principal; created_at : nat64; website : text };
service : () -> {
  caller_id : () -> (principal) query;
  create_user : (nat64) -> (principal);
  create_verifier : (text) -> (Verifier);
  delete_verifier : (principal) -> (GetVerifierResult);
  get_age : (principal) -> (GetUserAgeResult) query;
  get_user : (principal) -> (opt User) query;
  get_users : () -> (vec User) query;
  get_verifier : (principal) -> (opt Verifier) query;
  test_time : () -> (nat64) query;
}
